(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./docs/Grid.doc.mdx":function(e,a,t){"use strict";t.r(a);var n=t("./node_modules/react/index.js"),l=t.n(n),r=t("./node_modules/@mdx-js/tag/dist/index.js"),m=(t("./docs/styles/theme.less"),t("./docs/styles/docz.less"),t("./node_modules/docz/dist/index.m.js")),i=t("./src/index.js");a.default=function(e){var a=e.components;return l.a.createElement(r.MDXTag,{name:"wrapper",components:a},"\n","\n",l.a.createElement(r.MDXTag,{name:"h1",components:a,props:{id:"grid"}},l.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"h1",props:{"aria-hidden":!0,href:"#grid"}},l.a.createElement(r.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Grid"),"\n",l.a.createElement(r.MDXTag,{name:"h3",components:a,props:{id:"grid-system-using-flexbox"}},l.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"h3",props:{"aria-hidden":!0,href:"#grid-system-using-flexbox"}},l.a.createElement(r.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Grid system using flexbox."),"\n",l.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"equal-width"}},l.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#equal-width"}},l.a.createElement(r.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Equal Width:"),"\n",l.a.createElement(r.MDXTag,{name:"p",components:a},"Passing nothing into ",l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"<Grid>"),", you will get equal width columns based on the number of elements as its children."),"\n",l.a.createElement(m.d,{__code:function(e){return e&&l.a.createElement(e.pre,{className:"react-prism language-jsx"},l.a.createElement("code",null,"<Grid>\n  <Div>col #1</Div>\n  <Div>col #2</Div>\n</Grid>\n\u200c\u200c\n<Grid>\n  <Div>col #1</Div>\n  <Div>col #2</Div>\n  <Div>col #3</Div>\n</Grid>\n\u200c\u200c\n<Grid>\n  <Div>col #1</Div>\n  <Div>col #2</Div>\n  <Div>col #3</Div>\n  <Div>col #4</Div>\n</Grid>"))}},l.a.createElement(i.c,null,l.a.createElement(i.b,null,"col #1"),l.a.createElement(i.b,null,"col #2")),"\u200c\u200c",l.a.createElement(i.c,null,l.a.createElement(i.b,null,"col #1"),l.a.createElement(i.b,null,"col #2"),l.a.createElement(i.b,null,"col #3")),"\u200c\u200c",l.a.createElement(i.c,null,l.a.createElement(i.b,null,"col #1"),l.a.createElement(i.b,null,"col #2"),l.a.createElement(i.b,null,"col #3"),l.a.createElement(i.b,null,"col #4"))),"\n",l.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"specific-widthcolumns"}},l.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#specific-widthcolumns"}},l.a.createElement(r.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Specific Width/Columns:"),"\n",l.a.createElement(r.MDXTag,{name:"p",components:a},l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"<Grid>")," takes 3 different arrays corresponding to different resolutions (",l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"itemWidthsSmall"),", ",l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"itemWidthsMedium"),", and ",l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"itemWidthsLarge"),"), the elements of which are integers that act as columns. If you want columns to be equally sized at a specific resolution, simply leave out that resolution in question."),"\n",l.a.createElement(m.d,{__code:function(e){return e&&l.a.createElement(e.pre,{className:"react-prism language-jsx"},l.a.createElement("code",null,"<Grid\n  itemWidthsLarge={[7, 5]}\n  itemWidthsMedium={[8, 4]}\n  itemWidthsSmall={[9, 3]}\n>\n  <Div>Large: 7 cols \u2014 Medium: 8 cols \u2014 Small: 9 cols</Div>\n  <Div>Large: 5 cols \u2014 Medium: 4 cols \u2014 Small: 3 cols</Div>\n</Grid>\n\u200c\n<Grid itemWidthsLarge={[8, 4]} itemWidthsMedium={[3, 9]}>\n  <Div>Large: 8 cols \u2014 Medium: 3 cols \u2014 Small: 6 cols</Div>\n  <Div>Large: 4 cols \u2014 Medium: 9 cols \u2014 Small: 6 cols</Div>\n</Grid>\n\u200c\n<Grid itemWidthsLarge={[4, 8]} itemWidthsMedium={[8, 4]}>\n  <Div>Large: 4 cols \u2014 Medium: 8 cols \u2014 Small: 6 cols</Div>\n  <Div>Large: 8 cols \u2014 Medium: 4 cols \u2014 Small: 6 cols</Div>\n</Grid>"))}},l.a.createElement(i.c,{itemWidthsLarge:[7,5],itemWidthsMedium:[8,4],itemWidthsSmall:[9,3]},l.a.createElement(i.b,null,"Large: 7 cols \u2014 Medium: 8 cols \u2014 Small: 9 cols"),l.a.createElement(i.b,null,"Large: 5 cols \u2014 Medium: 4 cols \u2014 Small: 3 cols")),"\u200c",l.a.createElement(i.c,{itemWidthsLarge:[8,4],itemWidthsMedium:[3,9]},l.a.createElement(i.b,null,"Large: 8 cols \u2014 Medium: 3 cols \u2014 Small: 6 cols"),l.a.createElement(i.b,null,"Large: 4 cols \u2014 Medium: 9 cols \u2014 Small: 6 cols")),"\u200c",l.a.createElement(i.c,{itemWidthsLarge:[4,8],itemWidthsMedium:[8,4]},l.a.createElement(i.b,null,"Large: 4 cols \u2014 Medium: 8 cols \u2014 Small: 6 cols"),l.a.createElement(i.b,null,"Large: 8 cols \u2014 Medium: 4 cols \u2014 Small: 6 cols"))),"\n",l.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"stacking"}},l.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#stacking"}},l.a.createElement(r.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Stacking:"),"\n",l.a.createElement(r.MDXTag,{name:"p",components:a},l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"stackSmall"),", ",l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"stackMedium"),", and ",l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"stackLarge")," will stack the elements top-to-bottom at full-width."),"\n",l.a.createElement(m.d,{__code:function(e){return e&&l.a.createElement(e.pre,{className:"react-prism language-jsx"},l.a.createElement("code",null,"<Grid stackSmall stackMedium stackLarge>\n  <Div>col #1</Div>\n  <Div>col #2</Div>\n</Grid>"))}},l.a.createElement(i.c,{stackSmall:!0,stackMedium:!0,stackLarge:!0},l.a.createElement(i.b,null,"col #1"),l.a.createElement(i.b,null,"col #2"))),"\n",l.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"swapping"}},l.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#swapping"}},l.a.createElement(r.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Swapping:"),"\n",l.a.createElement(r.MDXTag,{name:"p",components:a},l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"swapSmall"),", ",l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"swapMedium"),", and ",l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"swapLarge")," will reverse the order of elements at the specified resolution."),"\n",l.a.createElement(m.d,{__code:function(e){return e&&l.a.createElement(e.pre,{className:"react-prism language-jsx"},l.a.createElement("code",null,"<Grid swapSmall swapMedium swapLarge>\n  <Div>1st in source</Div>\n  <Div>2nd in source</Div>\n</Grid>"))}},l.a.createElement(i.c,{swapSmall:!0,swapMedium:!0,swapLarge:!0},l.a.createElement(i.b,null,"1st in source"),l.a.createElement(i.b,null,"2nd in source"))),"\n",l.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"gutter-widths"}},l.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#gutter-widths"}},l.a.createElement(r.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Gutter Widths:"),"\n",l.a.createElement(r.MDXTag,{name:"p",components:a},l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"gutterSmall"),", ",l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"gutterMedium"),", and ",l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"gutterLarge")," takes a named spacing string and adjusts the gutter width accordingly. Defaults to ",l.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"x-small"),"."),"\n",l.a.createElement(m.d,{__code:function(e){return e&&l.a.createElement(e.pre,{className:"react-prism language-jsx"},l.a.createElement("code",null,'<Grid gutterSmall="xx-small" gutterMedium="xx-small" gutterLarge="xx-small">\n  <Div>xx-small gutter</Div>\n  <Div>xx-small gutter</Div>\n</Grid>\n\u200c\n<Grid gutterSmall="x-small" gutterMedium="x-small" gutterLarge="x-small">\n  <Div>x-small gutter</Div>\n  <Div>x-small gutter</Div>\n</Grid>\n\u200c\n<Grid gutterSmall="small" gutterMedium="small" gutterLarge="small">\n  <Div>small gutter</Div>\n  <Div>small gutter</Div>\n</Grid>\n\u200c\n<Grid gutterSmall="medium" gutterMedium="medium" gutterLarge="medium">\n  <Div>medium gutter</Div>\n  <Div>medium gutter</Div>\n</Grid>\n\u200c\n<Grid gutterSmall="large" gutterMedium="large" gutterLarge="large">\n  <Div>large gutter</Div>\n  <Div>large gutter</Div>\n</Grid>\n\u200c\n<Grid gutterSmall="x-large" gutterMedium="x-large" gutterLarge="x-large">\n  <Div>x-large gutter</Div>\n  <Div>x-large gutter</Div>\n</Grid>\n\u200c\n<Grid gutterSmall="xx-large" gutterMedium="xx-large" gutterLarge="xx-large">\n  <Div>xx-large gutter</Div>\n  <Div>xx-large gutter</Div>\n</Grid>'))}},l.a.createElement(i.c,{gutterSmall:"xx-small",gutterMedium:"xx-small",gutterLarge:"xx-small"},l.a.createElement(i.b,null,"xx-small gutter"),l.a.createElement(i.b,null,"xx-small gutter")),"\u200c",l.a.createElement(i.c,{gutterSmall:"x-small",gutterMedium:"x-small",gutterLarge:"x-small"},l.a.createElement(i.b,null,"x-small gutter"),l.a.createElement(i.b,null,"x-small gutter")),"\u200c",l.a.createElement(i.c,{gutterSmall:"small",gutterMedium:"small",gutterLarge:"small"},l.a.createElement(i.b,null,"small gutter"),l.a.createElement(i.b,null,"small gutter")),"\u200c",l.a.createElement(i.c,{gutterSmall:"medium",gutterMedium:"medium",gutterLarge:"medium"},l.a.createElement(i.b,null,"medium gutter"),l.a.createElement(i.b,null,"medium gutter")),"\u200c",l.a.createElement(i.c,{gutterSmall:"large",gutterMedium:"large",gutterLarge:"large"},l.a.createElement(i.b,null,"large gutter"),l.a.createElement(i.b,null,"large gutter")),"\u200c",l.a.createElement(i.c,{gutterSmall:"x-large",gutterMedium:"x-large",gutterLarge:"x-large"},l.a.createElement(i.b,null,"x-large gutter"),l.a.createElement(i.b,null,"x-large gutter")),"\u200c",l.a.createElement(i.c,{gutterSmall:"xx-large",gutterMedium:"xx-large",gutterLarge:"xx-large"},l.a.createElement(i.b,null,"xx-large gutter"),l.a.createElement(i.b,null,"xx-large gutter"))),"\n",l.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"proptypes"}},l.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#proptypes"}},l.a.createElement(r.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"PropTypes:"),"\n",l.a.createElement(m.e,{of:i.c}))}}}]);